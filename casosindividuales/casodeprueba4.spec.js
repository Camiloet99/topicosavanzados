// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Caso de prueba 4', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('Caso de prueba 4', async function() {
    // Test name: Caso de prueba 4
    // Step # | name | target | value
    // 1 | open | https://www.nafin.com/portalnf/content/herramientas-de-negocio/simulador-de-creditos/simulador-de-creditos.do | 
    await driver.get("https://www.nafin.com/portalnf/content/herramientas-de-negocio/simulador-de-creditos/simulador-de-creditos.do")
    // 2 | setWindowSize | 1920x1055 | 
    await driver.manage().window().setRect({ width: 1920, height: 1055 })
    // 3 | click | id=dispDate | 
    await driver.findElement(By.id("dispDate")).click()
    // 4 | doubleClick | id=creditAmount | 
    {
      const element = await driver.findElement(By.id("creditAmount"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
    // 5 | type | id=creditAmount | asvs
    await driver.findElement(By.id("creditAmount")).sendKeys("asvs")
    // 6 | mouseDown | id=paymentMethod | 
    {
      const element = await driver.findElement(By.id("paymentMethod"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    // 7 | mouseUp | css=.form-group:nth-child(4) | 
    {
      const element = await driver.findElement(By.css(".form-group:nth-child(4)"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    // 8 | click | css=.form-group:nth-child(4) | 
    await driver.findElement(By.css(".form-group:nth-child(4)")).click()
    // 9 | assertElementPresent | id=creditAmount-error | 
    // Validar que el campo de credito debe ser numerico
    {
      const elements = await driver.findElements(By.id("creditAmount-error"))
      assert(elements.length)
    }
    // 10 | click | id=paymentMethod | 
    await driver.findElement(By.id("paymentMethod")).click()
    // 11 | click | id=period | 
    await driver.findElement(By.id("period")).click()
    // 12 | select | id=period | label=4 años
    {
      const dropdown = await driver.findElement(By.id("period"))
      await dropdown.findElement(By.xpath("//option[. = '4 años']")).click()
    }
    // 13 | click | id=rate | 
    await driver.findElement(By.id("rate")).click()
    // 14 | doubleClick | id=rate | 
    {
      const element = await driver.findElement(By.id("rate"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
    // 15 | type | id=rate | 1000
    await driver.findElement(By.id("rate")).sendKeys("1000")
    // 16 | sendKeys | id=rate | ${KEY_ENTER}
    await driver.findElement(By.id("rate")).sendKeys(Key.ENTER)
    // 17 | assertElementPresent | id=rate-error | 
    // Validar que existe un mensaje de error por la alta tasa de interes
    {
      const elements = await driver.findElements(By.id("rate-error"))
      assert(elements.length)
    }
    // 18 | click | id=creditAmount | 
    await driver.findElement(By.id("creditAmount")).click()
    // 19 | doubleClick | id=creditAmount | 
    {
      const element = await driver.findElement(By.id("creditAmount"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
    // 20 | type | id=creditAmount | 100000
    await driver.findElement(By.id("creditAmount")).sendKeys("100000")
    // 21 | click | id=rate | 
    await driver.findElement(By.id("rate")).click()
    // 22 | click | id=rate | 
    await driver.findElement(By.id("rate")).click()
    // 23 | doubleClick | id=rate | 
    {
      const element = await driver.findElement(By.id("rate"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
    // 24 | type | id=rate | 10
    await driver.findElement(By.id("rate")).sendKeys("10")
    // 25 | click | css=div:nth-child(7) > .btn | 
    await driver.findElement(By.css("div:nth-child(7) > .btn")).click()
    // 26 | click | id=paymentMethod | 
    await driver.findElement(By.id("paymentMethod")).click()
    // 27 | select | id=paymentMethod | label=Mensual
    {
      const dropdown = await driver.findElement(By.id("paymentMethod"))
      await dropdown.findElement(By.xpath("//option[. = 'Mensual']")).click()
    }
    // 28 | click | css=div:nth-child(7) > .btn | 
    await driver.findElement(By.css("div:nth-child(7) > .btn")).click()
    // 29 | click | css=.glyphicon-calendar | 
    await driver.findElement(By.css(".glyphicon-calendar")).click()
    // 30 | click | linkText=10 | 
    await driver.findElement(By.linkText("10")).click()
    // 31 | click | css=div:nth-child(7) > .btn | 
    await driver.findElement(By.css("div:nth-child(7) > .btn")).click()
    // 32 | assertElementPresent | css=tr:nth-child(48) > td:nth-child(8) | 
    // Validar que existe la tabla cuando todos los inputs son correctos
    {
      const elements = await driver.findElements(By.css("tr:nth-child(48) > td:nth-child(8)"))
      assert(elements.length)
    }
    // 33 | assertText | css=tr:nth-child(48) > td:nth-child(8) | 48
    // Validar que el numero de meses es 48
    assert(await driver.findElement(By.css("tr:nth-child(48) > td:nth-child(8)")).getText() == "48")
  })
})
