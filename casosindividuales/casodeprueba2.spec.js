// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Caso de prueba 2', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('Caso de prueba 2', async function() {
    // Test name: Caso de prueba 2
    // Step # | name | target | value
    // 1 | open | https://www.nafin.com/portalnf/content/herramientas-de-negocio/simulador-de-creditos/simulador-de-creditos.do | 
    await driver.get("https://www.nafin.com/portalnf/content/herramientas-de-negocio/simulador-de-creditos/simulador-de-creditos.do")
    // 2 | setWindowSize | 1920x1055 | 
    await driver.manage().window().setRect({ width: 1920, height: 1055 })
    // 3 | click | id=dispDate | 
    await driver.findElement(By.id("dispDate")).click()
    // 4 | type | id=dispDate | 0/0/0
    await driver.findElement(By.id("dispDate")).sendKeys("0/0/0")
    // 5 | click | id=creditAmount | 
    await driver.findElement(By.id("creditAmount")).click()
    // 6 | click | id=creditAmount | 
    await driver.findElement(By.id("creditAmount")).click()
    // 7 | click | id=creditAmount | 
    await driver.findElement(By.id("creditAmount")).click()
    // 8 | doubleClick | id=creditAmount | 
    {
      const element = await driver.findElement(By.id("creditAmount"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
    // 9 | type | id=creditAmount | 1200000
    await driver.findElement(By.id("creditAmount")).sendKeys("1200000")
    // 10 | click | id=period | 
    await driver.findElement(By.id("period")).click()
    // 11 | select | id=period | label=1 año
    {
      const dropdown = await driver.findElement(By.id("period"))
      await dropdown.findElement(By.xpath("//option[. = '1 año']")).click()
    }
    // 12 | click | css=div:nth-child(7) > .btn | 
    await driver.findElement(By.css("div:nth-child(7) > .btn")).click()
    // 13 | click | id=paymentMethod | 
    await driver.findElement(By.id("paymentMethod")).click()
    // 14 | select | id=paymentMethod | label=Mensual
    {
      const dropdown = await driver.findElement(By.id("paymentMethod"))
      await dropdown.findElement(By.xpath("//option[. = 'Mensual']")).click()
    }
    // 15 | click | css=div:nth-child(7) > .btn | 
    await driver.findElement(By.css("div:nth-child(7) > .btn")).click()
    // 16 | assertElementPresent | css=.alert | 
    // Validar que tras error, un cuadro de alerta se muestra
    {
      const elements = await driver.findElements(By.css(".alert"))
      assert(elements.length)
    }
    // 17 | assertEditable | id=dispDate | 
    // Validar que tras error la fecha es editable
    {
      const element = await driver.findElement(By.id("dispDate"))
      assert(await element.isEnabled())
    }
    // 18 | assertEditable | id=creditAmount | 
    // Validar que tras error el monto es editable
    {
      const element = await driver.findElement(By.id("creditAmount"))
      assert(await element.isEnabled())
    }
    // 19 | assertEditable | id=paymentMethod | 
    // Validar que tras error la periodicidad de pago es editable
    {
      const element = await driver.findElement(By.id("paymentMethod"))
      assert(await element.isEnabled())
    }
    // 20 | assertEditable | id=period | 
    // Validar que tras error el plazo es editable
    {
      const element = await driver.findElement(By.id("period"))
      assert(await element.isEnabled())
    }
    // 21 | assertEditable | id=rate | 
    // Validar que tras error el interes es editable
    {
      const element = await driver.findElement(By.id("rate"))
      assert(await element.isEnabled())
    }
  })
})
